openapi: 3.0.0
info:
  title: api
  description: API for  project
  version: 1.0.0
tags:
  - name: users
  - name: auth
  - name: league
  - name: players
  - name: teams
  - name: admin
  
paths:
  /Register:
    post:
      tags:
      - auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: Username already exist
          
  /Login:
    post:
      tags:
      - auth
      summary: A signed up user logging in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        "200":
          description: login succeeded
        "400":
          description: wrong input parameters
        "401":
          description: Username or Password incorrect
          
  /Logout:
    post:
      tags:
      - auth
      summary: A signed up user logging out
      responses:
        "200":
          description: User logged out
          
  /players/SearchPlayerByName/{playerName}:
    get:
      tags:
      - players
      summary: Search Player By Name
      parameters: 
        - in: path
          name: playerName
          description: player info 
          required: true
          schema:
            type: string
            example: "yossi benayun"

      responses:
        "200":
          description: data of the specific player name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        "404":
          description: Player not found
          
  /players/SearchPlayerById/{playerId}:
    get:
      tags:
      - players
      summary: Search Player By Id
      parameters: 
        - in: path
          name: playerId
          description: player info 
          required: true
          schema:
            type: integer
            example: "122"

      responses:
        "200":
          description: data of the specific player Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        "404":
          description: Player not found
          
  /teams/SearchTeamById/{teamId}:
    get:
      tags:
      - teams
      summary: Search team By Id
      parameters:
        - in: path
          name: teamId
          description: team info
          required: true
          schema:
            type: integer
            example: "341"

      responses:
        "200":
          description: data of the specific team Id
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: '#/components/schemas/team'
                  past-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
                  future-games:
                    type: array
                    items:
                      $ref: '#/components/schemas/game'
        "404":
          description: Team  not found
          
  /teams/SearchTeamByName/{teamName}:
    get:
      tags:
      - teams
      summary: Search team By Name
      parameters:
        - in: path
          name: teamName
          description: team info
          required: true
          schema:
            type: string
            example: "monaco"
      responses:
        "200":
          description: data of the specific team name
          content:
            application/json:
              schema:
                properties:
                  team:
                    $ref: '#/components/schemas/team'
        "404":
          description: Team  not found
          
  /users/favoriteGames:
    post:
      tags:
      - users
      summary: add game to list of favorites if user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              example: "39"
      responses:
        "201":
          description: The game successfully saved as favorite
        "409":
          description: game already saved as favorite

    get:
      tags:
      - users
      summary: get all favorite games of user
      responses:
        "200":
          description: show all favorite games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
          
          
  /admin/AddGame:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/game'
      responses:
        "200":
          description: The game was successfully added
        "204":
          description: A team cannot play againts itself
        "404":
          description: Game  not found
          
  /admin/AddReferee:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/referee'
      responses:
        "200":
          description: The referee was successfully assigned
        "404":
          description: Game not found

          
  /admin/AddEvent:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        "200":
          description: The event was successfully added
        "404":
          description: Game not found
          
  /admin/AddScore:
    post:
      tags:
      - admin
      summary: add score to game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game_id:
                  type: integer
                  description: game id
                  example: 20
                homeTeamScore:
                  type: integer
                  description: score of the home team
                  example: 2
                awayTeamScore:
                  type: integer
                  description: score of the away team
                  example: 2
      responses:
        "200":
          description: The score was successfully updated
        "404":
          description: Game not found
          
          
  /league/getDetails:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show all favorite games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/league'
        "204":
          description: No favorite games
  
  /league/getAllGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show all league games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
          
  
  /league/pastGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show past games in league
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
        
  /league/futureGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show future games in league
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
      
          
components:
  schemas:
    UserRegister:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters only
        firstname:
          type: string
          description: user's first name
          example: Bob
        lastname:
          type: string
          description: user's last name
          example: Cohen
        country:
          type: string
          description: user's country
          example: greece
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: password contains between 5 to 10 chars, at least one of them is a number and a special char
          example: hantrish!9
        email:
          type: string
          format: email
          description: user's email
          example: bibiKing@walla.com
        image-url:
          type: string
          format: URL
          description: URL for the user's logo
          example: https://cloudinary.com/bibi
          
    UserLogin:
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letters only
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          
    team:
      type: object
      description: team info
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/player'
        name:
          type: string
          example: Chelsea FC
        favorite:
          type: boolean
          description: team is in list of favorite teams by user
          example: 'True'
          
    player:
      type: object
      description: player info
      properties:
        common name:
          type: string
          description: player's name
          example: 'Didier Drogba'
        nationality:
          type: string
          description: player's nationality
          example: 'Cote Dlvoire'
        date of birth:
          type: string
          format: date-time 
          description: player's date of birth
          example: '1992-05-26T23:20:50.52Z'
        country of birth:
          type: string
          description: player's country of birth
          example: 'Cote Dlvoire'
        height:
          type: number
          description: player's height
          example: '1.85'
        weight:
          type: number
          description: player's weight
          example: '75'
        favorite:
          type: boolean
          description: player is in list of favorite players by user
          example: 'True'
          
    league:
      type: object
      description: league info
      properties:
        name:
          type: string
          description: league's name
          example: 'superliga'
        season:
          type: string
          description: season's name
          example: '2018/19'
        stage:
          type: integer
          description: league's stage
          example: '4'
        next game:
          $ref: '#/components/schemas/game'
          
    game:
      type: object
      description: game info
      properties:
        date:
          type: string
          format: small date-time  
          description: game's full date
          example: '1992-05-26T23:20:50.52Z'
        homeTeamId:
          type: integer
          description: Id of home team
          example: '653'
        awayTeamId:
          type: integer
          description: Id of away team
          example: '939'
        stadium:
          type: string
          description: game's stadium
          example: 'Stamford Bridge'
        referee:
          type: string
          description: game's referee
          example: 'Mike Dean'
        homeTeamScore:
          type: integer
          description: score of home team
          example: '4'
        awayTeamScore:
          type: integer
          description: score of away team
          example: '0'
          
          
    event:
      type: object
      description: event info
      properties:
        type:
          type: string
          description: event's type
          example: 'red card'
        date:
          type: string
          format: small date-time  
          description: event's full date
          example: '1992-05-26T23:20:50.52Z'
        minuteOfGame:
          type: integer
          description: minute of game
          example: '22'
        game_id:
          type: integer
          description: game id that the event happened in
          example: '32'
        player_id:
          type: integer
          description: player id that made the event
          example: '44'
        description:
          type: string
          description: event's description
          example: 'red card to sergio ramos'
          
    referee:
      type: string
      description: game's referee
      example: 'Mike Dean'
